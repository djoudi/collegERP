<?php

/**
 * Basefields
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $fieldname
 * @property string $fieldtype
 * @property string $fieldkey
 * @property integer $fieldorder
 * @property integer $isNum
 * @property integer $isReq
 * @property Doctrine_Collection $field_values
 * @property Doctrine_Collection $student_fields
 * @property Doctrine_Collection $teacher_fields
 * @property Doctrine_Collection $lesson_fields
 * 
 * @method string              getFieldname()      Returns the current record's "fieldname" value
 * @method string              getFieldtype()      Returns the current record's "fieldtype" value
 * @method string              getFieldkey()       Returns the current record's "fieldkey" value
 * @method integer             getFieldorder()     Returns the current record's "fieldorder" value
 * @method integer             getIsNum()          Returns the current record's "isNum" value
 * @method integer             getIsReq()          Returns the current record's "isReq" value
 * @method Doctrine_Collection getFieldValues()    Returns the current record's "field_values" collection
 * @method Doctrine_Collection getStudentFields()  Returns the current record's "student_fields" collection
 * @method Doctrine_Collection getTeacherFields()  Returns the current record's "teacher_fields" collection
 * @method Doctrine_Collection getLessonFields()   Returns the current record's "lesson_fields" collection
 * @method fields              setFieldname()      Sets the current record's "fieldname" value
 * @method fields              setFieldtype()      Sets the current record's "fieldtype" value
 * @method fields              setFieldkey()       Sets the current record's "fieldkey" value
 * @method fields              setFieldorder()     Sets the current record's "fieldorder" value
 * @method fields              setIsNum()          Sets the current record's "isNum" value
 * @method fields              setIsReq()          Sets the current record's "isReq" value
 * @method fields              setFieldValues()    Sets the current record's "field_values" collection
 * @method fields              setStudentFields()  Sets the current record's "student_fields" collection
 * @method fields              setTeacherFields()  Sets the current record's "teacher_fields" collection
 * @method fields              setLessonFields()   Sets the current record's "lesson_fields" collection
 * 
 * @package    ubeo
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Basefields extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('fields');
        $this->hasColumn('fieldname', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('fieldtype', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('fieldkey', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'default' => 'field_key',
             'length' => 255,
             ));
        $this->hasColumn('fieldorder', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             'default' => 0,
             ));
        $this->hasColumn('isNum', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             'default' => 0,
             ));
        $this->hasColumn('isReq', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             'default' => 0,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('field_values', array(
             'local' => 'id',
             'foreign' => 'field_id'));

        $this->hasMany('student_fields', array(
             'local' => 'id',
             'foreign' => 'field_id'));

        $this->hasMany('teacher_fields', array(
             'local' => 'id',
             'foreign' => 'field_id'));

        $this->hasMany('lesson_fields', array(
             'local' => 'id',
             'foreign' => 'field_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}